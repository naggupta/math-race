[{"/Users/guptagaruda/Projects/GitHub/math-race/src/index.js":"1","/Users/guptagaruda/Projects/GitHub/math-race/src/serviceWorker.js":"2","/Users/guptagaruda/Projects/GitHub/math-race/src/App.js":"3","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/reducers/reducers.js":"4","/Users/guptagaruda/Projects/GitHub/math-race/src/Layout/Layout.js":"5","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actionTypes.js":"6","/Users/guptagaruda/Projects/GitHub/math-race/src/temp.js":"7","/Users/guptagaruda/Projects/GitHub/math-race/src/containers/RaceWrapper/RaceWrapper.js":"8","/Users/guptagaruda/Projects/GitHub/math-race/src/Config/Firebase.js":"9","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/index.js":"10","/Users/guptagaruda/Projects/GitHub/math-race/src/components/PlayerSection/PlayerSection.js":"11","/Users/guptagaruda/Projects/GitHub/math-race/src/components/RaceSetup/RaceSetup.js":"12","/Users/guptagaruda/Projects/GitHub/math-race/src/components/RaceComplete/RaceComplete.js":"13","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actions.js":"14","/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/QuestionGenerator.js":"15","/Users/guptagaruda/Projects/GitHub/math-race/src/UI/DisplayMessage/DisplayMessage.js":"16","/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Modal/Modal.js":"17","/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/NumberToEnglish.js":"18","/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Backdrop/Backdrop.js":"19","/Users/guptagaruda/Projects/GitHub/math-race/src/QuestionsDataService.js":"20","/Users/guptagaruda/Projects/GitHub/math-race/src/axios-firebase.js":"21"},{"size":1087,"mtime":1607347661343,"results":"22","hashOfConfig":"23"},{"size":5399,"mtime":1607952084021,"results":"24","hashOfConfig":"23"},{"size":607,"mtime":1606301488075,"results":"25","hashOfConfig":"23"},{"size":3373,"mtime":1611998337912,"results":"26","hashOfConfig":"23"},{"size":420,"mtime":1609268313065,"results":"27","hashOfConfig":"23"},{"size":267,"mtime":1608170317668,"results":"28","hashOfConfig":"23"},{"size":4564,"mtime":1609268282590,"results":"29","hashOfConfig":"23"},{"size":2795,"mtime":1611998337912,"results":"30","hashOfConfig":"23"},{"size":402,"mtime":1607987259949,"results":"31","hashOfConfig":"23"},{"size":109,"mtime":1607952092009,"results":"32","hashOfConfig":"23"},{"size":17750,"mtime":1612375670299,"results":"33","hashOfConfig":"23"},{"size":20734,"mtime":1612376035689,"results":"34","hashOfConfig":"23"},{"size":2432,"mtime":1607310446786,"results":"35","hashOfConfig":"23"},{"size":4156,"mtime":1611998337912,"results":"36","hashOfConfig":"23"},{"size":13573,"mtime":1612360582503,"results":"37","hashOfConfig":"23"},{"size":794,"mtime":1611998337912,"results":"38","hashOfConfig":"23"},{"size":1287,"mtime":1607531811214,"results":"39","hashOfConfig":"23"},{"size":3763,"mtime":1612024524883,"results":"40","hashOfConfig":"23"},{"size":724,"mtime":1607951901442,"results":"41","hashOfConfig":"23"},{"size":389,"mtime":1607957252114,"results":"42","hashOfConfig":"43"},{"size":228,"mtime":1608811000915,"results":"44","hashOfConfig":"23"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"jwe31w",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60","usedDeprecatedRules":"47"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"75","usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2kcu9m",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"/Users/guptagaruda/Projects/GitHub/math-race/src/index.js",[],["90","91","92","93","94","95"],"/Users/guptagaruda/Projects/GitHub/math-race/src/serviceWorker.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/App.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/reducers/reducers.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/Layout/Layout.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actionTypes.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/temp.js",["96"],"// import { null } from 'mathjs';\nimport React, { Component } from 'react';\nimport firebase from './Config/Firebase';\nimport * as Utils from './Utils/QuestionGenerator';\nimport axios from './axios-firebase';\n\n// import QuestionsDataService from './QuestionsDataService'\n\nclass Temp extends Component {\n  state = {\n    questions: null,\n  };\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    const questions = [];\n    const res=await axios.get('/questions.json');\n    const { data } = await res;\n\n    // axios\n      // .get('/questions.json')\n      // .then((response) => {\n        console.log(data.Word);\n        data.Word.forEach((item, idx) => {\n          // const question = item;\n          questions.push({ id: idx, ...item });\n          console.log(questions);\n        });\n\n        questions.forEach((question, idx) => {\n            const q = question.question;\n            const params = {};\n            for (let i = 0; ; i += 1) {\n              if (!(i in question)) break;\n              params[i] = question[i];\n            }\n      \n            Object.keys(params)\n              .sort()\n              .forEach((key) => {\n                const params1 = { ...params };\n                const param = params[key];\n                if (param.indexOf('{val}') > -1) params1.val = Utils.randomIntFromInterval(10, 99);\n                const substitute = Utils.replaceValues(param, params1);\n                const evalstr = Utils.evaluate(substitute);\n                params[key] = evalstr;\n              });\n            const answer = Utils.evaluate(Utils.replaceValues(question.answer, params));\n            const questionstr = Utils.replaceValues(question.question, params);\n            const question1 = { answer: answer, question: questionstr };\n            questions[idx] = { ...question, ...params };\n            console.log(question1);\n        \n          // const snapshot = db.collection('/questions').startAfter(2).limit(1);\n          // const item = await snapshot.get();\n          // const questions = [];\n          // // collections.docs.forEach((item) => {\n          //   const question = item.data();\n          //   questions.push({ id: item.id, ...question });\n          //   // Object.keys(question).forEach((key) => {\n          //   //   console.log(`${key} - ${question[key]}`);\n          //   // });\n          // // });\n          console.log(questions);\n          this.setState({ questions: questions });\n          // Object.keys(question).forEach((key) => {\n          //   console.log(`${key} - ${question[key]}`);\n          // });\n        // });\n        // dispatch(setIngredients(response.data))\n      })\n      // .catch((error) => {\n      //   console.log(error);\n      //   // dispatch(fetchIngredientsFailed());\n      // });\n  // }\n  // async componentDidMount() {\n  //   console.log('Loading...');\n  //   const db = firebase.firestore();\n  //   const firebaseDb = db.collection('/questions');\n  //   console.log(firebaseDb);\n  //   const snapshot = db.collection('/questions');\n  //   const collections = await snapshot.get();\n  //   const questions = [];\n  //   collections.docs.forEach((item) => {\n  //     const question = item.data();\n  //     questions.push({ id: item.id, ...question });\n  //     // Object.keys(question).forEach((key) => {\n  //     //   console.log(`${key} - ${question[key]}`);\n  //     // });\n  //   });\n   \n    // if (!doc.exists) {\n    //   console.log('No such document!');\n    // } else {\n    //   console.log('Document data:', doc.data());\n    // }\n    // const snapshot = await firebase.collection('questions').get();\n    // const questions = [];\n    // snapshot.docs.forEach((doc) => {\n    //   questions.push(doc.data());\n    //   console.log(doc.id, '=>', doc.data());\n    // });\n    // this.setState({ questions: questions });\n    // console.log(`Loaded${this.state.questions[0]}`);\n    // // const firebaseDb = firebase.collection('/questions')\n    // // firebaseDb.settings({\n    // //   timestampsInSnapshots: true,\n    // // });\n    // // const snapshot = await firebaseDb.collection('questions').get();\n    // // snapshot.forEach((doc) => {\n    // //   console.log(doc);\n    // // });\n  }\n\n  render() {\n    if (!this.state.questions) return <p>Loading....</p>;\n    else {\n      const wrapper = this.state.questions.map((question, idx) => {\n        return (\n          <p key={question.id}>\n            {question.question} - {question.answer}\n          </p>\n        );\n      });\n      return <div>{wrapper}</div>;\n    }\n  }\n}\n\nexport default Temp;\n","/Users/guptagaruda/Projects/GitHub/math-race/src/containers/RaceWrapper/RaceWrapper.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/Config/Firebase.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/index.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/PlayerSection/PlayerSection.js",["97","98"],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/RaceSetup/RaceSetup.js",["99","100","101","102"],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/RaceComplete/RaceComplete.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actions.js",["103","104"],"import * as actionTypes from './actionTypes';\nimport * as Utils from '../../../Utils/QuestionGenerator';\nimport firebase from '../../../Config/Firebase';\nimport axios from '../../../axios-firebase';\n\nexport const reset = () => {\n  return {\n    type: actionTypes.RESET,\n  };\n};\n\nexport const start = (playername1, playername2, questiontype1, questiontype2) => {\n  return async (dispatch, getstate) => {\n    // const { nos, digits, decimals } = getstate().game.questiontype;\n    console.log('[actions] start',questiontype1);\n    if ((['WORD', 'MONEY', 'FILL'].includes(questiontype1.type) || ['WORD', 'MONEY', 'FILL'].includes(questiontype2.type)) && !getstate().game.questions) {\n      //   axios.get('/questions.json')\n      //         .then(response=>{\n      //             console.log(response.data);\n      //             // dispatch(setIngredients(response.data))\n      //         })\n      //         .catch(error=>{\n      //             console.log(error);\n      //             // dispatch(fetchIngredientsFailed());\n      //         });\n      // };\n\n      const questions = {};\n\n      const res = await axios.get('/questions.json');\n      const { data } = await res;\n\n      // .then((response) => {\n        console.log('data:',data);\n      Object.keys(data).forEach((key) => {\n        const q = [];\n        data[key].forEach((item, idx) => {\n          // const question = item;\n          if (!(item.active && item.active === 'N')) q.push({ id: idx, ...item });\n        });\n        questions[key] = q;\n      });\n\n      // data.Word.forEach((item, idx) => {\n      //   // const question = item;\n      //   if (!(item.active && item.active === 'N')) questions.push({ id: idx, ...item });\n      // });\n\n      console.log('Questions', questions);\n      // const db = firebase.firestore();\n      // const snapshot = db.collection('/questions');\n      // const collections = await snapshot.get();\n      // const questions = [];\n      // collections.docs.forEach((item) => {\n      //   const question = item.data();\n      //   questions.push({ id: item.id, ...question });\n      //   // Object.keys(question).forEach((key) => {\n      //   //   console.log(`${key} - ${question[key]}`);\n      //   // });\n      // });\n      // console.log('[action.start]', questions);\n\n      await dispatch({\n        type: actionTypes.LOAD_QUESTIONS,\n        questions: questions,\n      });\n    }\n    // Question loaded if required\n    dispatch({\n      type: actionTypes.START,\n      // questiontype: questiontype,\n      players: [\n        { id: 0, name: playername1, points: 0, wrong: 0, ...Utils.generateQuestion(questiontype1, getstate().game.wordquestions), answerresult: '', questiontype: questiontype1 },\n        { id: 1, name: playername2, points: 0, wrong: 0, ...Utils.generateQuestion(questiontype2, getstate().game.wordquestions), answerresult: '', questiontype: questiontype2 },\n      ],\n    });\n  };\n};\n\n// export const start = () => {\n//     return (dispatch, getstate) => {\n//         const { nos, digits, decimals } = getstate().game.questiontype;\n//         dispatch({\n//             type: actionTypes.START,\n//             players: [Utils.generateQuestion(nos, digits, decimals), Utils.generateQuestion(nos, digits, decimals)],\n//         })\n//     }\n// };\n\nexport const nextQuestion = (playerno) => {\n  return (dispatch, getstate) => {\n    // const { nos, digits, decimals } = getstate().game.questiontype;\n    dispatch({\n      type: actionTypes.CORRECT,\n      playerno: playerno,\n      ...Utils.generateQuestion(getstate().game.players[playerno].questiontype, getstate().game.wordquestions),\n    });\n  };\n};\n\nexport const wrongAnswer = (playerno) => {\n  return (dispatch, getstate) => {\n    // const { nos, digits, decimals } = getstate().game.questiontype;\n    dispatch({\n      type: actionTypes.WRONG,\n      playerno: playerno,\n      ...Utils.generateQuestion(getstate().game.players[playerno].questiontype, getstate().game.wordquestions),\n    });\n  };\n};\n\nexport const complete = () => {\n  return {\n    type: actionTypes.COMPLETE,\n  };\n};\n\nexport const win = (playerno) => {\n  return {\n    playerno: playerno,\n    type: actionTypes.WIN,\n  };\n};\n","/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/QuestionGenerator.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/UI/DisplayMessage/DisplayMessage.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Modal/Modal.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/NumberToEnglish.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Backdrop/Backdrop.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/QuestionsDataService.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/axios-firebase.js",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":21,"column":14,"nodeType":"119","messageId":"120","endLine":21,"endColumn":15,"fix":"121"},{"ruleId":"117","severity":1,"message":"122","line":95,"column":42,"nodeType":"123","messageId":"120","endLine":95,"endColumn":43,"fix":"124"},{"ruleId":"125","severity":1,"message":"126","line":285,"column":78,"nodeType":"127","endLine":285,"endColumn":135},{"ruleId":"128","severity":1,"message":"129","line":48,"column":187,"nodeType":"130","messageId":"131","endLine":48,"endColumn":188,"fix":"132"},{"ruleId":"128","severity":1,"message":"129","line":48,"column":193,"nodeType":"130","messageId":"131","endLine":48,"endColumn":194,"fix":"133"},{"ruleId":"128","severity":1,"message":"129","line":217,"column":64,"nodeType":"130","messageId":"131","endLine":217,"endColumn":65,"fix":"134"},{"ruleId":"128","severity":1,"message":"129","line":217,"column":71,"nodeType":"130","messageId":"131","endLine":217,"endColumn":72,"fix":"135"},{"ruleId":"128","severity":1,"message":"129","line":15,"column":34,"nodeType":"130","messageId":"131","endLine":15,"endColumn":35,"fix":"136"},{"ruleId":"128","severity":1,"message":"129","line":34,"column":28,"nodeType":"130","messageId":"131","endLine":34,"endColumn":29,"fix":"137"},"lines-around-directive",["138"],"no-spaced-func",["139"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"space-infix-ops","Operator '=' must be spaced.","VariableDeclarator","missingSpace",{"range":"140","text":"141"},"Operator '<' must be spaced.","BinaryExpression",{"range":"142","text":"143"},"react/no-danger","Dangerous property 'dangerouslySetInnerHTML' found","JSXAttribute","comma-spacing","A space is required after ','.","Punctuator","missing",{"range":"144","text":"145"},{"range":"146","text":"145"},{"range":"147","text":"145"},{"range":"148","text":"145"},{"range":"149","text":"145"},{"range":"150","text":"145"},"padding-line-between-statements","func-call-spacing",[477,478]," = ",[3811,3812]," < ",[1692,1692]," ",[1698,1698],[9726,9726],[9733,9733],[507,507],[1232,1232]]