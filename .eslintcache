[{"/Users/guptagaruda/Projects/GitHub/math-race/src/index.js":"1","/Users/guptagaruda/Projects/GitHub/math-race/src/serviceWorker.js":"2","/Users/guptagaruda/Projects/GitHub/math-race/src/App.js":"3","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/reducers/reducers.js":"4","/Users/guptagaruda/Projects/GitHub/math-race/src/Layout/Layout.js":"5","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actionTypes.js":"6","/Users/guptagaruda/Projects/GitHub/math-race/src/temp.js":"7","/Users/guptagaruda/Projects/GitHub/math-race/src/containers/RaceWrapper/RaceWrapper.js":"8","/Users/guptagaruda/Projects/GitHub/math-race/src/Config/Firebase.js":"9","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/index.js":"10","/Users/guptagaruda/Projects/GitHub/math-race/src/components/RaceComplete/RaceComplete.js":"11","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actions.js":"12","/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/QuestionGenerator.js":"13","/Users/guptagaruda/Projects/GitHub/math-race/src/UI/DisplayMessage/DisplayMessage.js":"14","/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Modal/Modal.js":"15","/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/NumberToEnglish.js":"16","/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Backdrop/Backdrop.js":"17","/Users/guptagaruda/Projects/GitHub/math-race/src/QuestionsDataService.js":"18","/Users/guptagaruda/Projects/GitHub/math-race/src/axios-firebase.js":"19","/Users/guptagaruda/Projects/GitHub/math-race/src/components/DrawArea/DrawArea.js":"20","/Users/guptagaruda/Projects/GitHub/math-race/src/components/DrawArea/Drawing.js":"21","/Users/guptagaruda/Projects/GitHub/math-race/src/components/DrawArea/DrawingLine.js":"22","/Users/guptagaruda/Projects/GitHub/math-race/src/components/MultiplayerWrapper/MultiplayerWrapper.js":"23","/Users/guptagaruda/Projects/GitHub/math-race/src/components/MultiplayerSection/MultiplayerSection.js":"24","/Users/guptagaruda/Projects/GitHub/math-race/src/components/MultiplayerSetup/MultiplayerSetup.js":"25","/Users/guptagaruda/Projects/GitHub/math-race/src/components/PlayerSelection/PlayerSelection.js":"26","/Users/guptagaruda/Projects/GitHub/math-race/src/components/SingleplayerSetup/SingleplayerSetup.js":"27","/Users/guptagaruda/Projects/GitHub/math-race/src/components/SingleplayerWrapper/SingleplayerWrapper.js":"28"},{"size":1087,"mtime":1607347661343,"results":"29","hashOfConfig":"30"},{"size":5399,"mtime":1607952084021,"results":"31","hashOfConfig":"30"},{"size":607,"mtime":1606301488075,"results":"32","hashOfConfig":"30"},{"size":3554,"mtime":1614646510157,"results":"33","hashOfConfig":"30"},{"size":420,"mtime":1609268313065,"results":"34","hashOfConfig":"30"},{"size":318,"mtime":1614601299397,"results":"35","hashOfConfig":"30"},{"size":4564,"mtime":1609268282590,"results":"36","hashOfConfig":"30"},{"size":4559,"mtime":1614698900027,"results":"37","hashOfConfig":"30"},{"size":402,"mtime":1607987259949,"results":"38","hashOfConfig":"30"},{"size":130,"mtime":1614602725496,"results":"39","hashOfConfig":"30"},{"size":2503,"mtime":1614650293935,"results":"40","hashOfConfig":"30"},{"size":4533,"mtime":1614726202840,"results":"41","hashOfConfig":"30"},{"size":15339,"mtime":1613603631105,"results":"42","hashOfConfig":"30"},{"size":794,"mtime":1611998337912,"results":"43","hashOfConfig":"30"},{"size":1287,"mtime":1607531811214,"results":"44","hashOfConfig":"30"},{"size":3763,"mtime":1612024524883,"results":"45","hashOfConfig":"30"},{"size":724,"mtime":1607951901442,"results":"46","hashOfConfig":"30"},{"size":389,"mtime":1607957252114,"results":"47","hashOfConfig":"48"},{"size":228,"mtime":1608811000915,"results":"49","hashOfConfig":"30"},{"size":1959,"mtime":1613608777527,"results":"50","hashOfConfig":"30"},{"size":335,"mtime":1613608574818,"results":"51","hashOfConfig":"30"},{"size":332,"mtime":1613608615305,"results":"52","hashOfConfig":"30"},{"size":1035,"mtime":1614696348551,"results":"53","hashOfConfig":"30"},{"size":18242,"mtime":1614696338403,"results":"54","hashOfConfig":"30"},{"size":19171,"mtime":1614699513940,"results":"55","hashOfConfig":"30"},{"size":2853,"mtime":1614732257974,"results":"56","hashOfConfig":"30"},{"size":12183,"mtime":1614731370570,"results":"57","hashOfConfig":"30"},{"size":1044,"mtime":1614726310367,"results":"58","hashOfConfig":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"jwe31w",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"74","usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"83","usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"88","usedDeprecatedRules":"61"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2kcu9m",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"61"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/guptagaruda/Projects/GitHub/math-race/src/index.js",[],["120","121","122","123","124","125"],"/Users/guptagaruda/Projects/GitHub/math-race/src/serviceWorker.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/App.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/reducers/reducers.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/Layout/Layout.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actionTypes.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/temp.js",["126"],"// import { null } from 'mathjs';\nimport React, { Component } from 'react';\nimport firebase from './Config/Firebase';\nimport * as Utils from './Utils/QuestionGenerator';\nimport axios from './axios-firebase';\n\n// import QuestionsDataService from './QuestionsDataService'\n\nclass Temp extends Component {\n  state = {\n    questions: null,\n  };\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    const questions = [];\n    const res=await axios.get('/questions.json');\n    const { data } = await res;\n\n    // axios\n      // .get('/questions.json')\n      // .then((response) => {\n        console.log(data.Word);\n        data.Word.forEach((item, idx) => {\n          // const question = item;\n          questions.push({ id: idx, ...item });\n          console.log(questions);\n        });\n\n        questions.forEach((question, idx) => {\n            const q = question.question;\n            const params = {};\n            for (let i = 0; ; i += 1) {\n              if (!(i in question)) break;\n              params[i] = question[i];\n            }\n      \n            Object.keys(params)\n              .sort()\n              .forEach((key) => {\n                const params1 = { ...params };\n                const param = params[key];\n                if (param.indexOf('{val}') > -1) params1.val = Utils.randomIntFromInterval(10, 99);\n                const substitute = Utils.replaceValues(param, params1);\n                const evalstr = Utils.evaluate(substitute);\n                params[key] = evalstr;\n              });\n            const answer = Utils.evaluate(Utils.replaceValues(question.answer, params));\n            const questionstr = Utils.replaceValues(question.question, params);\n            const question1 = { answer: answer, question: questionstr };\n            questions[idx] = { ...question, ...params };\n            console.log(question1);\n        \n          // const snapshot = db.collection('/questions').startAfter(2).limit(1);\n          // const item = await snapshot.get();\n          // const questions = [];\n          // // collections.docs.forEach((item) => {\n          //   const question = item.data();\n          //   questions.push({ id: item.id, ...question });\n          //   // Object.keys(question).forEach((key) => {\n          //   //   console.log(`${key} - ${question[key]}`);\n          //   // });\n          // // });\n          console.log(questions);\n          this.setState({ questions: questions });\n          // Object.keys(question).forEach((key) => {\n          //   console.log(`${key} - ${question[key]}`);\n          // });\n        // });\n        // dispatch(setIngredients(response.data))\n      })\n      // .catch((error) => {\n      //   console.log(error);\n      //   // dispatch(fetchIngredientsFailed());\n      // });\n  // }\n  // async componentDidMount() {\n  //   console.log('Loading...');\n  //   const db = firebase.firestore();\n  //   const firebaseDb = db.collection('/questions');\n  //   console.log(firebaseDb);\n  //   const snapshot = db.collection('/questions');\n  //   const collections = await snapshot.get();\n  //   const questions = [];\n  //   collections.docs.forEach((item) => {\n  //     const question = item.data();\n  //     questions.push({ id: item.id, ...question });\n  //     // Object.keys(question).forEach((key) => {\n  //     //   console.log(`${key} - ${question[key]}`);\n  //     // });\n  //   });\n   \n    // if (!doc.exists) {\n    //   console.log('No such document!');\n    // } else {\n    //   console.log('Document data:', doc.data());\n    // }\n    // const snapshot = await firebase.collection('questions').get();\n    // const questions = [];\n    // snapshot.docs.forEach((doc) => {\n    //   questions.push(doc.data());\n    //   console.log(doc.id, '=>', doc.data());\n    // });\n    // this.setState({ questions: questions });\n    // console.log(`Loaded${this.state.questions[0]}`);\n    // // const firebaseDb = firebase.collection('/questions')\n    // // firebaseDb.settings({\n    // //   timestampsInSnapshots: true,\n    // // });\n    // // const snapshot = await firebaseDb.collection('questions').get();\n    // // snapshot.forEach((doc) => {\n    // //   console.log(doc);\n    // // });\n  }\n\n  render() {\n    if (!this.state.questions) return <p>Loading....</p>;\n    else {\n      const wrapper = this.state.questions.map((question, idx) => {\n        return (\n          <p key={question.id}>\n            {question.question} - {question.answer}\n          </p>\n        );\n      });\n      return <div>{wrapper}</div>;\n    }\n  }\n}\n\nexport default Temp;\n","/Users/guptagaruda/Projects/GitHub/math-race/src/containers/RaceWrapper/RaceWrapper.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/Config/Firebase.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/index.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/RaceComplete/RaceComplete.js",["127"],"import React, { Fragment } from 'react';\nimport * as Classes from './RaceComplete.module.css';\n\nfunction RaceComplete(props) {\n  const winner = props.players[0].points >= props.players[1].points ? props.players[0].name : props.players[1].name;\n\n  const playAgain=() => {\n    props.reset();\n    props.history.push('/math-race/setup')\n  }\n\n  const players = [...props.players].reverse().map((player) => {\n    if (!player.name) return <Fragment key={player.id} />;\n    const score = +player.points - player.wrong + (winner === player.name ? 10 : 0);\n    return (\n      <div key={player.id}>\n        <h1>\n          {player.name}, {winner === player.name ? 'You won!!' : 'Opps You lost!!'}\n        </h1>\n        <span className={['fa-stack', Classes.Score].join(' ')}>\n          <span className={['fa fa-star fa-stack-2x'].join(' ')} />\n          <strong className=\"fa-stack-1x\">{player.points}</strong>\n          <span className={Classes.ScoreLabel}>Correct</span>\n        </span>\n        <span className={['fa-stack', Classes.Score].join(' ')}>\n          <span className={['fa fa-star fa-stack-2x'].join(' ')} />\n          <strong className=\"fa-stack-1x\">{-player.wrong}</strong>\n          <span className={Classes.ScoreLabel}>Wrong</span>\n        </span>\n        {/* <span className={['fa-stack', Classes.Score].join(' ')}>\n                    <span className={['fa fa-star fa-stack-2x'].join(' ')} />\n                    <strong className=\"fa-stack-1x\">\n                    {0}\n                    </strong>\n                    <span className={Classes.ScoreLabel}>Time Bonous</span>\n                </span> */}\n        <span className={['fa-stack', Classes.Score].join(' ')}>\n          <span className={['fa fa-star fa-stack-2x'].join(' ')} />\n          <strong className=\"fa-stack-1x\">{winner === player.name ? 10 : 0}</strong>\n          <span className={Classes.ScoreLabel}>Win Bonus</span>\n        </span>\n        <span className={['fa-stack', Classes.Score].join(' ')}>\n          <span className={['fa fa-star fa-stack-2x'].join(' ')} />\n          <strong className=\"fa-stack-1x\">{score}</strong>\n          <span className={Classes.ScoreLabel}>Total</span>\n        </span>\n      </div>\n    );\n  });\n  return (\n    <div className={Classes.RaceComplete}>\n      {players}\n      <button type=\"button\" onClick={playAgain} onKeyPress={playAgain} className={['w3-btn', 'w3-round-large', Classes.BtnGo].join(' ')}>\n        Play Again &gt;&gt;\n      </button>\n    </div>\n  );\n}\n\nexport default RaceComplete;\n","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actions.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/QuestionGenerator.js",["128"],"import * as mathjs from 'mathjs';\nimport moment from 'moment';\nimport numberToEnglish from './NumberToEnglish';\n\nexport const generateQuestion = (questiontype, wordquestions) => {\n  const { type, nos, digits, inwords } = questiontype;\n  if (type === '+-' || type === '+-x') return generatePlusMinusQuestion(questiontype);\n  else if (type === 'x') return generateMultiplyQuestion(questiontype);\n  else if (type === '/') return generateDivideQuestion(questiontype);\n  else if (type === 'X2') return generateSquareQuestion(questiontype);\n  else if (['WORD', 'MONEY', 'FILL'].includes(type)) return generateWordsQuestion(questiontype, wordquestions);\n  else if (['TIME+-'].includes(type)) return generateTimeAdditionQuestion(questiontype);\n  return {\n    question: '', // '2+3',\n    questions: [],\n    answer: '', // mathjs.evaluate('2+3'),\n  };\n}; //\n\n// export const generateMultiQuestion = (questiontype) => {\n//   let currentnumber = 0;\n//   let question = '';\n//   let answer = 0;\n//   const { type, nos, digits, inwords } = questiontype;\n//   let { decimals = 0 } = questiontype;\n//   if (inwords) decimals = 0;\n//   const symbols=[];\n\n//   const totaldigits = digits + decimals;\n//   for (let i = 0; i < nos; i += 1) {\n//     const temptype = type;\n//     let sign = '+';\n//     if (i === 0 || answer < 10 ** (totaldigits - 1)) sign = '+';\n//     else if ((answer >= 100 || answer <= 10) && type === '+-x') sign = randomSign('+-');\n//     else if (i>1 && type === '+-x' && !symbols.includes('x') && answer>9 && answer<100) sign = 'x'\n//     else sign = randomSign(temptype);\n//     // const sign = i === 0 || answer < 10 ** (totaldigits - 1) ? '+' : randomSign(temptype);\n//     symbols.push(sign);\n\n//     let tonumber = 10 ** totaldigits - 1;\n//     let fromnumber = 10 ** (totaldigits - 1) + 1;\n//     if (sign === 'x') {\n//       fromnumber = 2;\n//       tonumber = 9;\n//     } else if (sign === '-' && tonumber > answer) tonumber = answer;\n//     // console.log(`${fromnumber},${tonumber}`)\n//     currentnumber = randomIntFromInterval(fromnumber, tonumber);\n//     if (sign === '+' || sign === '-') answer += (sign === '+' ? 1 : -1) * currentnumber;\n//     else if (sign === 'x') answer *= currentnumber;\n//     if (!inwords) question = `${question} ${i > 0 ? sign : ''} ${currentnumber / (decimals === 0 ? 1 : 10 ** decimals)}`;\n//     else if (inwords) {\n//       const toword = numberToEnglish(currentnumber);\n//       question = `${question}${i <= 0 ? '' : sign === '+' ? ' <u><i>plus</i></u> ' : sign === '-' ? ' <u><i>minus</i></u> ' : ' u><i>times</i></u> '}${toword}`;\n//     }\n//   }\n//   answer /= decimals === 0 ? 1 : 10 ** decimals;\n//   console.log(`${question} ? ${answer}`);\n//   return {\n//     question: question,\n//     answer: answer,\n//   };\n// }\n\nexport const generateMultiplyQuestion = (questiontype) => {\n  // let question = '';\n  // let answer = 0;\n  const { type, digits, inwords, tens } = questiontype;\n  const nos = 2;\n  let { decimals = 0 } = questiontype;\n  if (inwords) decimals = 0;\n  const symbols = [];\n  const tonumber = 10 ** digits - 1;\n  const fromnumber = 10 ** (digits - 1) + 1;\n  const multiplicend = randomIntFromInterval(fromnumber, tonumber);\n  const multiplier = randomIntFromInterval(2, 9);\n  const answer = multiplier * multiplicend;\n  // console.log(`${question} ? ${answer}`);\n  let question = '';\n\n  if (!inwords) question = `${multiplicend} X ${multiplier}`;\n  else if (inwords) question = `${numberToEnglish(multiplicend)} X ${numberToEnglish(multiplier)}`;\n  \n  return {\n    question: question,\n    questions: [],\n    answer: answer,\n  };\n};\n\nexport const generateDivideQuestion = (questiontype) => {\n   // let question = '';\n  // let answer = 0;\n  const { type, digits, inwords, tens } = questiontype;\n  const nos = 2;\n  let { decimals = 0 } = questiontype;\n  if (inwords) decimals = 0;\n  const symbols = [];\n  const tonumber = 10 ** digits - 1;\n  const fromnumber = 10 ** (digits - 1) + 1;\n  const answer = randomIntFromInterval(fromnumber, tonumber);\n  const divider = randomIntFromInterval(2, 9);\n  const dividend = answer * divider;\n  // console.log(`${question} ? ${answer}`);\n  let question = '';\n\n  if (!inwords) question = `${dividend} / ${divider}`;\n  else if (inwords) question = `${numberToEnglish(dividend)} X ${numberToEnglish(divider)}`;\n  \n  return {\n    question: question,\n    questions: [],\n    answer: answer,\n  };\n\n};\n\nexport const generateSquareQuestion = (questiontype) => {\n  let currentnumber = 0;\n  let question = '';\n  let answer = 0;\n  const { type, digits, inwords, tens } = questiontype;\n  const nos = 2;\n  let { decimals = 0 } = questiontype;\n  if (inwords) decimals = 0;\n  const symbols = [];\n\n  const totaldigits = digits + decimals;\n  // for (let i = 0; i < nos; i += 1) {\n  const temptype = type;\n  // let sign = '+';\n  // if (i === 0 || answer < 10 ** (totaldigits - 1)) sign = '+';\n  // else if ((answer >= 100 || answer <= 10) && type === '+-x' && digits > 1) sign = randomSign('+-');\n  // else if (answer > 10 && type === '+-x' && digits === 1) sign = randomSign('+-');\n  // else if (i > 1 && type === '+-x' && !symbols.includes('x') && answer > 9 && answer < 100 && digits > 1) sign = 'x';\n  // else if (i > 1 && type === '+-x' && !symbols.includes('x') && answer < 10 && digits === 1) sign = 'x';\n  // else sign = randomSign(temptype);\n  // const sign = i === 0 || answer < 10 ** (totaldigits - 1) ? '+' : randomSign(temptype);\n  // symbols.push(sign);\n\n  let tonumber = 10 ** totaldigits - 1;\n  if (tens === 'Y' && totaldigits === 2) tonumber = 19;\n\n  const fromnumber = 10 ** (totaldigits - 1) + 1;\n  // if (sign === 'x') {\n  //   fromnumber = 2;\n  //   tonumber = 9;\n  // } else if (sign === '-' && tonumber > answer) tonumber = answer;\n  // // console.log(`${fromnumber},${tonumber}`)\n  currentnumber = randomIntFromInterval(fromnumber, tonumber);\n  // if (sign === '+' || sign === '-') answer += (sign === '+' ? 1 : -1) * currentnumber;\n  // else if (sign === 'x') answer *= currentnumber;\n  if (!inwords) question = `${currentnumber}<sup>2</sup>`;\n  else if (inwords) {\n    const toword = numberToEnglish(currentnumber);\n    question = `${toword}<sup>2</sup>`;\n  }\n  // }\n  answer = currentnumber * currentnumber;\n  // console.log(`${question} ? ${answer}`);\n  return {\n    question: question,\n    questions: [],\n    answer: answer,\n  };\n};\n\nexport const generateWordsQuestion = (questiontype, questions) => {\n  const { type, nos, digits, inwords } = questiontype;\n  const wordquestions = questions[type];\n  const questionno = randomIntFromInterval(0, wordquestions.length - 1);\n  const question = wordquestions[questionno];\n\n  let { decimals = 0 } = questiontype;\n  if (inwords) decimals = 0;\n  const totaldigits = digits + decimals;\n  const tonumber = 10 ** totaldigits - 1;\n  const fromnumber = 10 ** (totaldigits - 1) + 1;\n\n  const q = question.question;\n  const qparams = {};\n  for (let i = 0; ; i += 1) {\n    if (!(i in question)) break;\n    qparams[i] = question[i];\n  }\n\n  Object.keys(qparams)\n    .sort()\n    .forEach((key) => {\n      const params1 = { ...qparams };\n      const param = qparams[key];\n      if (param.indexOf('{val}') > -1) params1.val = randomIntFromInterval(fromnumber, tonumber);\n      const substitute = replaceValues(param, params1);\n      const evalstr = evaluate(substitute);\n      qparams[key] = evalstr;\n    });\n\n  const answer = evaluate(replaceValues(question.answer, qparams));\n  const questionstr = replaceValues(question.question, qparams);\n\n  return { answer: answer, question: questionstr, questions: [] };\n};\n\nexport const generatePlusMinusQuestion = (questiontype) => {\n  let currentnumber = 0;\n  let question = '';\n  const questions = [];\n  let answer = 0;\n  const { type, nos, digits, inwords } = questiontype;\n  let { decimals = 0 } = questiontype;\n  if (inwords) decimals = 0;\n  const symbols = [];\n\n  const totaldigits = digits + decimals;\n  for (let i = 0; i < nos; i += 1) {\n    const temptype = type;\n    let sign = '+';\n    if (i === 0 || answer < 10 ** (totaldigits - 1)) sign = '+';\n    else if ((answer >= 100 || answer <= 10) && type === '+-x' && digits > 1) sign = randomSign('+-');\n    else if (answer > 10 && type === '+-x' && digits === 1) sign = randomSign('+-');\n    else if (i > 1 && type === '+-x' && !symbols.includes('x') && answer > 9 && answer < 100 && digits > 1) sign = 'x';\n    else if (i > 1 && type === '+-x' && !symbols.includes('x') && answer < 10 && digits === 1) sign = 'x';\n    else sign = randomSign(temptype);\n    // const sign = i === 0 || answer < 10 ** (totaldigits - 1) ? '+' : randomSign(temptype);\n    symbols.push(sign);\n\n    let tonumber = 10 ** totaldigits - 1;\n    let fromnumber = 10 ** (totaldigits - 1) + 1;\n    if (sign === 'x') {\n      fromnumber = 2;\n      tonumber = 9;\n    } else if (sign === '-' && tonumber > answer) tonumber = answer;\n    // console.log(`${fromnumber},${tonumber}`)\n    currentnumber = randomIntFromInterval(fromnumber, tonumber);\n    let q = '';\n    if (sign === '+' || sign === '-') answer += (sign === '+' ? 1 : -1) * currentnumber;\n    else if (sign === 'x') answer *= currentnumber;\n    if (!inwords) {\n      q = `${i > 0 ? sign : ''} ${currentnumber / (decimals === 0 ? 1 : 10 ** decimals)}`;\n      question = `${question} ${q}`;\n      questions.push(q.replace('+', ''));\n    } else if (inwords) {\n      const toword = numberToEnglish(currentnumber);\n      q = `${i <= 0 ? '' : sign === '+' ? ' <u><i>plus</i></u> ' : sign === '-' ? ' <u><i>minus</i></u> ' : ' <u><i>times</i></u> '}${toword}`;\n      question = `${question}${q}`;\n      questions.push(q.replace('+', ''));\n    }\n  }\n  answer /= decimals === 0 ? 1 : 10 ** decimals;\n  // console.log(`${question} ? ${answer}`);\n  questions.push('?');\n  // console.log('[Question Generator]', questions);\n  return {\n    question: question,\n    questions: questions,\n    answer: answer,\n  };\n};\n\nexport const generateTimeAdditionQuestion = (questiontype) => {\n  // let currentnumber = 0;\n  // let question = '';\n  const questions = [];\n  // let answer = 0;\n  const { type, nos, digits, HR24, level, inwords } = questiontype;\n  const symbols = [];\n\n  const hrs = HR24 === 'Y' ? randomIntFromInterval(0, 23) : randomIntFromInterval(1, 12);\n  let min = 0;\n  if (level === 1) min = randomFromList(['0', '15', '30', '45']);\n  else if (level === 2) min = randomFromList(['0', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55']);\n  else if (level === 3) min = randomFromList(['0', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55']);\n  else if (level === 4) min = randomIntFromInterval(0, 59);\n  const timeval = timeformat(hrs, min);\n  const sign = randomSign('+-');\n  let addmin = '';\n  let addhrs = '';\n  if (level === 1) addmin = randomFromList(['15', '30', '45']);\n  else if (level === 2 || level === 3) addmin = randomFromList(['10', '15', '20', '25', '30', '35', '40', '45', '50', '55']);\n  else if (level === 4) addmin = randomIntFromInterval(1, 59);\n\n  if (level > 2) addhrs = randomIntFromInterval(1, 10);\n\n  // eslint-disable-next-line new-cap\n  let answerdt = new moment(timeval, HR24 === 'Y' ? 'HH:mm' : 'hh:mm');\n  let questionstr = `${timeval} ${sign} ${addhrs} ${addhrs ? 'hrs' : ''} ${addmin} min`;\n  console.log(questionstr);\n\n  if (inwords) {\n    let toword = '';\n    if (+answerdt.format('mm') === 0) toword = `${numberToEnglish(+answerdt.format('HH'))} o'clock`;\n    else if (+answerdt.format('mm') === 30) toword = `Half Past ${numberToEnglish(+answerdt.format('HH'))}`;\n    else if (+answerdt.format('mm') < 30) toword = `${numberToEnglish(answerdt.format('mm'))} min past ${numberToEnglish(+answerdt.format('HH'))}`;\n    else if (+answerdt.format('mm') > 30) {\n      let tohrstr = 1 + +answerdt.format('HH');\n      tohrstr = HR24 === 'Y' && tohrstr === 24 ? '0' : tohrstr;\n      tohrstr = HR24 !== 'Y' && tohrstr === 13 ? '1' : tohrstr;\n      toword = `${numberToEnglish(60 - answerdt.format('mm'))} min to ${numberToEnglish(tohrstr)}`;\n    }\n    questionstr = `${toword} ${sign === '+' ? ' <u><i>plus</i></u> ' : ' <u><i>minus</i></u> '} ${numberToEnglish(addhrs)} ${addhrs ? 'hrs' : ''} ${numberToEnglish(addmin)} minsn`;\n    console.log(questionstr);\n  }\n\n  if (sign === '+') answerdt = answerdt.add({ hours: addhrs, minutes: addmin });\n  else if (sign === '-') answerdt = answerdt.subtract({ hours: addhrs, minutes: addmin });\n\n  // console.log('[GenerateTimeQuestion]', sign, answerdt.format('hh:mm'));\n  const answer = '';\n  // console.log('[Question Generator]', questions);\n  return {\n    question: questionstr,\n    questions: '',\n    answer: answerdt.format(HR24 === 'Y' ? 'HH:mm' : 'hh:mm'),\n  };\n};\n\nconst timeformat = (hrs, min) => {\n  return `${hrs < 10 ? '0' : ''}${hrs}:${min < 10 ? '0' : ''}${min}`;\n};\n\nexport const randomIntFromInterval = (min, max) => {\n  // min and max included\n  // if (decimals === 0)\n  return Math.floor(Math.random() * (max - min + 1) + min);\n  // else {\n  //     const decimalnumber = (10 ** decimals);\n  //     console.log(`${(max * decimalnumber)},${(min * decimalnumber) + 1}`)\n  //     return Math.floor(Math.random() * ((max * decimalnumber) - (min * decimalnumber) + 1) + (min * decimalnumber)) / decimalnumber;\n  // }\n};\n\nexport const randomFromList = (list) => {\n  // retuns a number from list\n  return list[Math.floor(Math.random() * list.length)];\n};\n\n// const randomSign = () => {\n//   return Math.round(Math.random()) * 2 - 1;\n// };\n\nconst randomSign = (type) => {\n  const signs = type.split('');\n  const randval = randomIntFromInterval(0, signs.length - 1);\n  return signs[randval];\n  // else {\n  //     const decimalnumber = (10 ** decimals);\n  //     console.log(`${(max * decimalnumber)},${(min * decimalnumber) + 1}`)\n  //     return Math.floor(Math.random() * ((max * decimalnumber) - (min * decimalnumber) + 1) + (min * decimalnumber)) / decimalnumber;\n  // }\n};\n\nexport const evaluate = (str) => {\n  return mathjs.evaluate(str);\n};\n\nexport const replaceString = (str, ...args) => {\n  let base = str;\n  for (let i = 0; i < args.length; i += 1) base = base.replace(`{${i}}`, args[i]);\n\n  return base;\n  // const replacements = { '{NAME}': 'Mike', '{AGE}': '26', '{EVENT}': '20' };\n  //   let str = 'My Name is {NAME} and my age is {AGE}.';\n\n  // str = str.replace(/{\\w+}/g, (all) => {\n  //   return replacements[`{${all}}`] || all;\n  // });\n};\n\nexport const replaceValues = (str, valueHash) => {\n  let base = str;\n  base = base.replace(/{\\w+}/g, (all) => {\n    // console.log('[Utils.replaceValue]', all);\n    return valueHash[all.replace('{', '').replace('}', '')]; // || all;\n  });\n  return base;\n};\n\nconst gcd = (a, b) => {\n  return b ? gcd(b, a % b) : a;\n};\n\nconst decimalToFraction = (_decimal) => {\n  if (_decimal === parseInt(_decimal, 10)) {\n    return {\n      top: parseInt(_decimal, 10),\n      bottom: 1,\n      display: `${parseInt(_decimal, 10)}/${1}`,\n    };\n  } else {\n    let top = _decimal.toString().includes('.') ? _decimal.toString().replace(/\\d+[.]/, '') : 0;\n    const bottom = 10 ** top.toString().replace('-', '').length;\n    if (_decimal >= 1) {\n      top = +top + Math.floor(_decimal) * bottom;\n    } else if (_decimal <= -1) {\n      top = +top + Math.ceil(_decimal) * bottom;\n    }\n\n    const x = Math.abs(gcd(top, bottom));\n    return {\n      top: top / x,\n      bottom: bottom / x,\n      display: `${top / x}/${bottom / x}`,\n    };\n  }\n};\n","/Users/guptagaruda/Projects/GitHub/math-race/src/UI/DisplayMessage/DisplayMessage.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Modal/Modal.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/NumberToEnglish.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Backdrop/Backdrop.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/QuestionsDataService.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/axios-firebase.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/DrawArea/DrawArea.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/DrawArea/Drawing.js",["129"],"import React from 'react';\nimport DrawingLine from './DrawingLine';\nimport * as Classes from './DrawArea.module.css';\n\nfunction Drawing({ lines }) {\n  return (\n    <svg className={Classes.drawing}>\n      {lines.map((line, index) => (\n        <DrawingLine key={index} line={line} />\n      ))}\n    </svg>\n  );\n}\n\nexport default Drawing;\n","/Users/guptagaruda/Projects/GitHub/math-race/src/components/DrawArea/DrawingLine.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/MultiplayerWrapper/MultiplayerWrapper.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/MultiplayerSection/MultiplayerSection.js",["130"],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/MultiplayerSetup/MultiplayerSetup.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/PlayerSelection/PlayerSelection.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/SingleplayerSetup/SingleplayerSetup.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/SingleplayerWrapper/SingleplayerWrapper.js",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":21,"column":14,"nodeType":"145","messageId":"146","endLine":21,"endColumn":15,"fix":"147"},{"ruleId":"143","severity":1,"message":"144","line":7,"column":18,"nodeType":"145","messageId":"146","endLine":7,"endColumn":19,"fix":"148"},{"ruleId":"149","severity":1,"message":"150","line":113,"column":5,"nodeType":"151","messageId":"152","endLine":115,"endColumn":1,"fix":"153"},{"ruleId":"154","severity":1,"message":"155","line":9,"column":27,"nodeType":"156","endLine":9,"endColumn":32},{"ruleId":"157","severity":1,"message":"158","line":290,"column":78,"nodeType":"159","endLine":290,"endColumn":135},"lines-around-directive",["160"],"no-spaced-func",["161"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"space-infix-ops","Operator '=' must be spaced.","VariableDeclarator","missingSpace",{"range":"162","text":"163"},{"range":"164","text":"163"},"padded-blocks","Block must not be padded by blank lines.","BlockStatement","neverPadBlock",{"range":"165","text":"166"},"react/no-array-index-key","Do not use Array index in keys","Identifier","react/no-danger","Dangerous property 'dangerouslySetInnerHTML' found","JSXAttribute","padding-line-between-statements","func-call-spacing",[477,478]," = ",[262,263],[4395,4397],"\n"]