[{"/Users/guptagaruda/Projects/GitHub/math-race/src/index.js":"1","/Users/guptagaruda/Projects/GitHub/math-race/src/serviceWorker.js":"2","/Users/guptagaruda/Projects/GitHub/math-race/src/App.js":"3","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/reducers/reducers.js":"4","/Users/guptagaruda/Projects/GitHub/math-race/src/Layout/Layout.js":"5","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actionTypes.js":"6","/Users/guptagaruda/Projects/GitHub/math-race/src/temp.js":"7","/Users/guptagaruda/Projects/GitHub/math-race/src/containers/RaceWrapper/RaceWrapper.js":"8","/Users/guptagaruda/Projects/GitHub/math-race/src/Config/Firebase.js":"9","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/index.js":"10","/Users/guptagaruda/Projects/GitHub/math-race/src/components/PlayerSection/PlayerSection.js":"11","/Users/guptagaruda/Projects/GitHub/math-race/src/components/RaceSetup/RaceSetup.js":"12","/Users/guptagaruda/Projects/GitHub/math-race/src/components/RaceComplete/RaceComplete.js":"13","/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actions.js":"14","/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/QuestionGenerator.js":"15","/Users/guptagaruda/Projects/GitHub/math-race/src/UI/DisplayMessage/DisplayMessage.js":"16","/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Modal/Modal.js":"17","/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/NumberToEnglish.js":"18","/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Backdrop/Backdrop.js":"19","/Users/guptagaruda/Projects/GitHub/math-race/src/QuestionsDataService.js":"20","/Users/guptagaruda/Projects/GitHub/math-race/src/axios-firebase.js":"21"},{"size":1087,"mtime":1607347661343,"results":"22","hashOfConfig":"23"},{"size":5399,"mtime":1607952084021,"results":"24","hashOfConfig":"23"},{"size":607,"mtime":1606301488075,"results":"25","hashOfConfig":"23"},{"size":3345,"mtime":1610166347066,"results":"26","hashOfConfig":"23"},{"size":420,"mtime":1609268313065,"results":"27","hashOfConfig":"23"},{"size":267,"mtime":1608170317668,"results":"28","hashOfConfig":"23"},{"size":4564,"mtime":1609268282590,"results":"29","hashOfConfig":"23"},{"size":2786,"mtime":1607310246561,"results":"30","hashOfConfig":"23"},{"size":402,"mtime":1607987259949,"results":"31","hashOfConfig":"23"},{"size":109,"mtime":1607952092009,"results":"32","hashOfConfig":"23"},{"size":14249,"mtime":1610170506845,"results":"33","hashOfConfig":"23"},{"size":17654,"mtime":1610171046443,"results":"34","hashOfConfig":"23"},{"size":2432,"mtime":1607310446786,"results":"35","hashOfConfig":"23"},{"size":3756,"mtime":1610165838130,"results":"36","hashOfConfig":"23"},{"size":9629,"mtime":1610166369893,"results":"37","hashOfConfig":"23"},{"size":791,"mtime":1606328906278,"results":"38","hashOfConfig":"23"},{"size":1287,"mtime":1607531811214,"results":"39","hashOfConfig":"23"},{"size":3740,"mtime":1607951954872,"results":"40","hashOfConfig":"23"},{"size":724,"mtime":1607951901442,"results":"41","hashOfConfig":"23"},{"size":389,"mtime":1607957252114,"results":"42","hashOfConfig":"43"},{"size":228,"mtime":1608811000915,"results":"44","hashOfConfig":"23"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"jwe31w",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60","usedDeprecatedRules":"47"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"47"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2kcu9m",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"/Users/guptagaruda/Projects/GitHub/math-race/src/index.js",[],["91","92","93","94","95","96"],"/Users/guptagaruda/Projects/GitHub/math-race/src/serviceWorker.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/App.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/reducers/reducers.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/Layout/Layout.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actionTypes.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/temp.js",["97"],"// import { null } from 'mathjs';\nimport React, { Component } from 'react';\nimport firebase from './Config/Firebase';\nimport * as Utils from './Utils/QuestionGenerator';\nimport axios from './axios-firebase';\n\n// import QuestionsDataService from './QuestionsDataService'\n\nclass Temp extends Component {\n  state = {\n    questions: null,\n  };\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    const questions = [];\n    const res=await axios.get('/questions.json');\n    const { data } = await res;\n\n    // axios\n      // .get('/questions.json')\n      // .then((response) => {\n        console.log(data.Word);\n        data.Word.forEach((item, idx) => {\n          // const question = item;\n          questions.push({ id: idx, ...item });\n          console.log(questions);\n        });\n\n        questions.forEach((question, idx) => {\n            const q = question.question;\n            const params = {};\n            for (let i = 0; ; i += 1) {\n              if (!(i in question)) break;\n              params[i] = question[i];\n            }\n      \n            Object.keys(params)\n              .sort()\n              .forEach((key) => {\n                const params1 = { ...params };\n                const param = params[key];\n                if (param.indexOf('{val}') > -1) params1.val = Utils.randomIntFromInterval(10, 99);\n                const substitute = Utils.replaceValues(param, params1);\n                const evalstr = Utils.evaluate(substitute);\n                params[key] = evalstr;\n              });\n            const answer = Utils.evaluate(Utils.replaceValues(question.answer, params));\n            const questionstr = Utils.replaceValues(question.question, params);\n            const question1 = { answer: answer, question: questionstr };\n            questions[idx] = { ...question, ...params };\n            console.log(question1);\n        \n          // const snapshot = db.collection('/questions').startAfter(2).limit(1);\n          // const item = await snapshot.get();\n          // const questions = [];\n          // // collections.docs.forEach((item) => {\n          //   const question = item.data();\n          //   questions.push({ id: item.id, ...question });\n          //   // Object.keys(question).forEach((key) => {\n          //   //   console.log(`${key} - ${question[key]}`);\n          //   // });\n          // // });\n          console.log(questions);\n          this.setState({ questions: questions });\n          // Object.keys(question).forEach((key) => {\n          //   console.log(`${key} - ${question[key]}`);\n          // });\n        // });\n        // dispatch(setIngredients(response.data))\n      })\n      // .catch((error) => {\n      //   console.log(error);\n      //   // dispatch(fetchIngredientsFailed());\n      // });\n  // }\n  // async componentDidMount() {\n  //   console.log('Loading...');\n  //   const db = firebase.firestore();\n  //   const firebaseDb = db.collection('/questions');\n  //   console.log(firebaseDb);\n  //   const snapshot = db.collection('/questions');\n  //   const collections = await snapshot.get();\n  //   const questions = [];\n  //   collections.docs.forEach((item) => {\n  //     const question = item.data();\n  //     questions.push({ id: item.id, ...question });\n  //     // Object.keys(question).forEach((key) => {\n  //     //   console.log(`${key} - ${question[key]}`);\n  //     // });\n  //   });\n   \n    // if (!doc.exists) {\n    //   console.log('No such document!');\n    // } else {\n    //   console.log('Document data:', doc.data());\n    // }\n    // const snapshot = await firebase.collection('questions').get();\n    // const questions = [];\n    // snapshot.docs.forEach((doc) => {\n    //   questions.push(doc.data());\n    //   console.log(doc.id, '=>', doc.data());\n    // });\n    // this.setState({ questions: questions });\n    // console.log(`Loaded${this.state.questions[0]}`);\n    // // const firebaseDb = firebase.collection('/questions')\n    // // firebaseDb.settings({\n    // //   timestampsInSnapshots: true,\n    // // });\n    // // const snapshot = await firebaseDb.collection('questions').get();\n    // // snapshot.forEach((doc) => {\n    // //   console.log(doc);\n    // // });\n  }\n\n  render() {\n    if (!this.state.questions) return <p>Loading....</p>;\n    else {\n      const wrapper = this.state.questions.map((question, idx) => {\n        return (\n          <p key={question.id}>\n            {question.question} - {question.answer}\n          </p>\n        );\n      });\n      return <div>{wrapper}</div>;\n    }\n  }\n}\n\nexport default Temp;\n","/Users/guptagaruda/Projects/GitHub/math-race/src/containers/RaceWrapper/RaceWrapper.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/Config/Firebase.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/index.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/PlayerSection/PlayerSection.js",["98"],"import React, { Component, Fragment, PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\n// import useSound from 'use-sound';\nimport { Howl, Howler } from 'howler';\nimport * as ReducerActions from '../../store/game/actions/index';\nimport Classes from './PlayerSection.module.css';\nimport * as Utils from '../../Utils/QuestionGenerator';\nimport DisplayMessage from '../../UI/DisplayMessage/DisplayMessage';\nimport Modal from '../../UI/Modal/Modal';\nimport successSound from '../../sounds/success.mp3';\nimport wrongSound from '../../sounds/wrong.mp3';\nimport movingFishSound from '../../sounds/movingfish.mp3';\nimport clickSound from '../../sounds/click.mp3';\nimport clapsSound from '../../sounds/claps.mp3';\n// // import PlaySound from '../../Utils/PlaySound';\n// import UIfx from 'uifx';\n\nclass PlayerSection extends PureComponent {\n  success = new Howl({ src: successSound, volume: 1 });\n  wrong = new Howl({ src: wrongSound, volume: 1 });\n  click = new Howl({ src: clickSound, volume: 1 });\n  movingfish = new Howl({ src: movingFishSound, volume: 1 });\n  claps = new Howl({ src: clapsSound, volume: 1 });\n  timers = [];\n\n  state = {\n    // filter: 'ytd',\n    // answer: '',\n    // answerresult: '',\n    closedisplay: false,\n    question: '',\n    fullquestion: '',\n  };\n\n  constructor(props) {\n    super(props);\n    this.correctRef = React.createRef();\n    this.wrongRef = React.createRef();\n    this.questionRef = React.createRef();\n    // this.inputAnswer = React.createRef();\n    // console.log('[PlayerSection] constructor');\n  }\n\n  componentDidMount() {\n    const player = this.props.players[this.props.playerno];\n    if (player.questiontype.delay === 0) this.setState({ question: player.question, fullquestion: player.question });\n    else\n      player.questions.forEach((question, i) => {\n        const timer = setTimeout(() => {\n          this.setState({ question: question, fullquestion: player.question });\n        }, i * player.questiontype.delay * 1000);\n\n        this.timers.push(timer);\n      });\n    console.log('[PlayerSection] componentDidMount');\n  }\n\n  // shouldComponentUpdate(nextProps, newState) {\n  //     console.log('[PlayerSection] shouldComponentUpdate', this.props.players[this.props.playerno].question , nextProps.players[nextProps.playerno].question);\n  //     if (this.props.players[this.props.playerno].question !== nextProps.players[nextProps.playerno].question) {\n  //       const player = nextProps.players[nextProps.playerno];\n  //       this.setState({ question: player.question });\n  //     }\n  //     return true;\n  // }\n\n  componentDidUpdate() {\n    console.log('[PlayerSection] componentDidUpdate');\n    const player = this.props.players[this.props.playerno];\n    if (player.question !== this.state.fullquestion) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      if (player.questiontype.delay === 0)\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({ question: player.question, fullquestion: player.question });\n      else\n        player.questions.forEach((question, i) => {\n          const timer = setTimeout(() => {\n            this.setState({ question: question, fullquestion: player.question });\n          }, i * 1000 * player.questiontype.delay);\n          this.timers.push(timer);\n        });\n    }\n  }\n\n  buttonTheme = () => {\n    return this.props.playerno === '1' ? 'w3-ripple w3-hover-indigo w3-indigo' : 'w3-ripple w3-hover-red w3-pink';\n  };\n\n  sectionTheme = () => {\n    return this.props.playerno === '1' ? 'w3-indigo' : 'w3-pink';\n  };\n\n  goClick = () => {\n    const player = this.props.players[this.props.playerno];\n    const correctref = this.correctRef.current;\n    const questionRef = this.questionRef.current;\n    const wrongref = this.wrongRef.current;\n\n    this.timers.forEach((timer) => {\n      clearInterval(timer);\n    });\n\n    if (!this.inputAnswer.value) return;\n    if (+this.inputAnswer.value === +player.answer) {\n      if (player.points === player.questiontype.points - 1) {\n        // alert(`${player.name} Win`);\n        // this.props.reset();\n        this.success.play();\n        this.movingfish.play();\n        this.props.win(this.props.playerno);\n        setTimeout(() => {\n          this.props.complete(this.props.playerno);\n          this.claps.play();\n        }, 2000);\n\n        return;\n      }\n      // wrapper.style.visibility = 'true';\n      questionRef.classList.remove(Classes.ShowQuestion);\n      correctref.classList.add(Classes.MessageAnimate);\n      questionRef.classList.add(Classes.HideQuestion);\n\n      setTimeout(() => {\n        this.props.nextQuestion(this.props.playerno);\n        // this.setState({ answer: '' });\n        this.inputAnswer.value = '';\n        correctref.classList.remove(Classes.MessageAnimate);\n        questionRef.classList.remove(Classes.HideQuestion);\n        questionRef.classList.add(Classes.ShowQuestion);\n      }, 1000);\n      this.success.play();\n      this.movingfish.play();\n      // new UIfx({ asset: successSound }).play();\n    } else {\n      wrongref.classList.add(Classes.MessageAnimate);\n      // useSound(wrongSound);\n      setTimeout(() => {\n        this.props.wrongAnswer(this.props.playerno);\n        // this.setState({ answer: '' });\n        this.inputAnswer.value = '';\n        wrongref.classList.remove(Classes.MessageAnimate);\n      }, 1000);\n      this.wrong.play();\n      // new UIfx({ asset: wrongSound }).play();\n    }\n  };\n\n  appendAnswer = (val) => {\n    if (val === '<') this.inputAnswer.value = this.inputAnswer.value.slice(0, -1);\n    else this.inputAnswer.value += `${val}`;\n    this.click.play();\n  };\n\n  render() {\n    const player = this.props.players[this.props.playerno];\n    console.log('[PlayerSection] render', this.props.playerno, player.answerresult, player.question, 'questions', player.questions);\n    // const messagedisplay = (player.answerresult) ? <DisplayMessage display={player.answerresult} /> : <Fragment />;\n    const messagedisplay = (\n      <Fragment>\n        <div ref={this.correctRef} className={[Classes.DisplayMessage, Classes.Correct].join(' ')}>\n          <i style={{ margin: '5px' }} className=\"fa fa-check\" />\n        </div>\n        <div ref={this.wrongRef} className={[Classes.DisplayMessage, Classes.Wrong].join(' ')}>\n          {player.answer}\n        </div>\n      </Fragment>\n    );\n    // this.setState({ answerresult: '' });\n    return (\n      <div className={[this.props.playerno === '0' ? Classes._0 : Classes._1].join(' ')}>\n        <Modal show={!!this.state.closedisplay} modelClosed={() => this.setState({ closedisplay: false })}>\n          <span>Do you want to exit the game?</span>\n          <div>\n            <a role=\"button\" onClick={this.props.reset} tabIndex={0} onKeyPress={this.props.reset} style={{ margin: '10px' }} className={['w3-button', 'w3-round-large', this.buttonTheme()].join(' ')}>\n              {' '}\n              Restart\n            </a>\n            <a\n              role=\"button\"\n              onClick={() => this.setState({ closedisplay: false })}\n              tabIndex={0}\n              onKeyPress={() => this.setState({ closedisplay: false })}\n              style={{ margin: '10px' }}\n              className={['w3-button', 'w3-round-large', 'w3-grey'].join(' ')}\n            >\n              {' '}\n              Cancel\n            </a>\n          </div>\n        </Modal>\n        {messagedisplay}\n        <div className={[Classes.PlayerCharacter].join(' ')}>\n          <img\n            style={{\n              position: 'absolute',\n              transform: +this.props.playerno === 0 ? 'scaleX(1)' : 'rotateX(180deg)',\n              transition: '2s',\n              left: `${player.points * (90 / +player.questiontype.points)}vw`,\n            }}\n            alt={this.props.playerno}\n            className={[Classes.PlayerCharacter, this.props.playerno === 1 ? Classes._1 : Classes._2].join(' ')}\n            height=\"auto\"\n            width=\"100px\"\n            src={`${process.env.PUBLIC_URL}/images/Fish_${this.props.playerno}.svg`}\n          />\n        </div>\n        <div className={Classes.QuestionBar}>\n          <div>\n            <span className={[this.sectionTheme()].join(' ')}>\n              <span className={[Classes.PlayerName].join(' ')}>{player.name}</span>\n            </span>\n            <span style={{ position: 'relative' }} className={[this.sectionTheme()].join(' ')}>\n              <span className={['fa-stack', Classes.Score].join(' ')}>\n                <span className={['fa fa-star fa-stack-2x'].join(' ')} />\n                <strong className=\"fa-stack-1x\" style={{ color: '#000' }}>\n                  {player.points}\n                </strong>\n              </span>\n              <div>\n                <a role=\"button\" onClick={() => this.setState({ closedisplay: true })} tabIndex={0} onKeyPress={() => this.setState({ closedisplay: true })} className={Classes.Close}>\n                  <i className=\"fa fa-window-close\" />\n                </a>\n              </div>\n            </span>\n          </div>\n          {/* <span className={Classes.Question}><span style={{fontSize:'2.5em'}}>Emily has £46.20. She wants to buy a new e-book. It costs £20. How much more money does she need to Save?</span></span> */}\n          <span ref={this.questionRef} className={Classes.Question}>\n            <CSSTransition classNames=\"question\" timeout={200}>\n              <div><span style={{ fontSize: '2.5em' }} dangerouslySetInnerHTML={{ __html: this.state.question }} />\n              </div>\n            </CSSTransition>\n            <input\n              ref={(e) => {\n                this.inputAnswer = e;\n              }}\n              onKeyDown={() => false}\n              onKeyPress={() => false}\n              onKeyUp={() => false}\n              type=\"text\"\n              maxLength=\"7\"\n              className={['w3-btn', 'w3-round-large', this.sectionTheme(), Classes.Answer].join(' ')}\n            />\n          </span>\n        </div>\n        <div className={Classes.ButtonBar}>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('1')} className={['w3-button', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            1\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('2')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            2\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('3')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            3\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('4')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            4\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('5')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            5\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('6')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            6\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('7')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            7\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('8')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            8\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('9')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            9\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('0')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            0\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('.')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            .\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('-')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            -\n          </button>\n          <button type=\"button\" data-playerno={this.props.playerno} onClick={() => this.appendAnswer('<')} className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnNumber].join(' ')}>\n            &lt;\n          </button>\n\n          <button\n            type=\"button\"\n            data-playerno={this.props.playerno}\n            onClick={(e) => this.goClick(e.currentTarget.dataset.playerno)}\n            className={['w3-btn', 'w3-round-large', this.buttonTheme(), Classes.BtnGo].join(' ')}\n          >\n            GO\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  players: state.game.players,\n  // questiontype: state.game.questiontype,\n  // totalpoints: state.game.questiontype.points,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  reset: () => dispatch(ReducerActions.reset()),\n  // init: (playername1, playername2, questiontype) => dispatch(ReducerActions.init(playername1, playername2, questiontype)),\n  // start: () => dispatch(ReducerActions.start()),\n  nextQuestion: (playerno) => dispatch(ReducerActions.nextQuestion(playerno)),\n  wrongAnswer: (playerno) => dispatch(ReducerActions.wrongAnswer(playerno)),\n  win: (playerno) => dispatch(ReducerActions.win(playerno)),\n  complete: () => dispatch(ReducerActions.complete()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerSection);\n","/Users/guptagaruda/Projects/GitHub/math-race/src/components/RaceSetup/RaceSetup.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/components/RaceComplete/RaceComplete.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/store/game/actions/actions.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/QuestionGenerator.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/UI/DisplayMessage/DisplayMessage.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Modal/Modal.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/Utils/NumberToEnglish.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/UI/Backdrop/Backdrop.js",[],["99","100","101","102","103","104"],"/Users/guptagaruda/Projects/GitHub/math-race/src/QuestionsDataService.js",[],"/Users/guptagaruda/Projects/GitHub/math-race/src/axios-firebase.js",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":21,"column":14,"nodeType":"119","messageId":"120","endLine":21,"endColumn":15,"fix":"121"},{"ruleId":"122","severity":1,"message":"123","line":231,"column":56,"nodeType":"124","endLine":231,"endColumn":113},{"ruleId":"105","replacedBy":"125"},{"ruleId":"107","replacedBy":"126"},{"ruleId":"109","replacedBy":"127"},{"ruleId":"111","replacedBy":"128"},{"ruleId":"113","replacedBy":"129"},{"ruleId":"115","replacedBy":"130"},"lines-around-directive",["131"],"no-spaced-func",["132"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"space-infix-ops","Operator '=' must be spaced.","VariableDeclarator","missingSpace",{"range":"133","text":"134"},"react/no-danger","Dangerous property 'dangerouslySetInnerHTML' found","JSXAttribute",["131"],["132"],[],[],[],[],"padding-line-between-statements","func-call-spacing",[477,478]," = "]